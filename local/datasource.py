#AUTOGENERATED! DO NOT EDIT! File to edit: dev/2) datasource.ipynb (unless otherwise specified).

__all__ = ['input_paths', 'output_paths', 'csv_split_paths', 'tfm_image_pt', 'tfm_brain_mask_pt',
           'tfm_skull_stripped_image_pt', 'tfm_ventricles_mask_pt', 'unsqz', 'create_mr_ct_dsource',
           'get_notl_brain_mr_dsource', 'get_notl_brain_ct_dsource', 'get_notl_ventricle_mr_dsource',
           'get_notl_ventricle_ct_dsource', 'datasource_dict', 'atlas_tfm_image_pt', 'atlas_tfm_brain_mask_pt',
           'atlas_tfm_skull_stripped_image_pt', 'atlas_tfm_ventricles_mask_pt', 'create_atlas_dsource',
           'get_atlas_brain_mr_dsource', 'get_atlas_ventricle_mr_dsource']

#Cell
from fastai2.basics import *
from fastai2.vision import *

#Cell
import yaml
with open(os.environ.get('YAML_DATA', '../data.yaml')) as f: data_config = yaml.load(f.read(), yaml.FullLoader)

# define input and output paths
input_paths = types.SimpleNamespace(
    ATLAS_PATH=data_config['input']['ATLAS_PATH'],
    MR_PATH=data_config['input']['MR_PATH'],
    CT_PATH=data_config['input']['CT_PATH'],
    MR_TEST2_PATH=data_config['input']['MR_TEST2_PATH'],
    CT_TEST2_PATH=data_config['input']['CT_TEST2_PATH'],
)

output_paths = types.SimpleNamespace(
    ATLAS=data_config['output']['ATLAS'],
    MR=data_config['output']['MR'],
    CT=data_config['output']['CT'])

csv_split_paths = types.SimpleNamespace(
    ATLAS=data_config['csv_splits']['ATLAS'],
    MR=data_config['csv_splits']['MR'],
    CT=data_config['csv_splits']['CT'])

#Cell
def tfm_image_pt(o, data_path): return data_path/(o + "_image_normalized.pt")
def tfm_brain_mask_pt(o, data_path): return data_path/(o + "_brain_mask.pt")
def tfm_skull_stripped_image_pt(o, data_path): return data_path/(o + "_skull_stripped_image_normalized.pt")
def tfm_ventricles_mask_pt(o, data_path): return data_path/(o + "_ventricles_mask.pt")
def unsqz(x): return x[None,...]

#Cell
def create_mr_ct_dsource(data_path, csv_splits_path, tfm_pt_x, tfm_pt_y):
    """
    data_path: directory of tensor files
    csv_splits_path: csv path for split info
    tfm_pt_x: tfm_image_pt or tfm_skull_stripped_image_pt
    tfm_pt_y: tfm_brain_mask_pt or tfm_ventricles_mask_pt
    """
    data_path = Path(data_path)
    splits_df = pd.read_csv(csv_splits_path)
    suids = splits_df['StudyInstanceId'].values

    tfmx = [partial(tfm_pt_x, data_path=data_path), torch.load, unsqz]
    tfmy = [partial(tfm_pt_y, data_path=data_path), torch.load]

    train_suids = splits_df.loc[splits_df.SplitType == "train", "StudyInstanceId"].values # subset 0
    valid_suids = splits_df.loc[splits_df.SplitType == "valid", "StudyInstanceId"].values # subset 1
    test1_suids = splits_df.loc[splits_df.SplitType == "test1", "StudyInstanceId"].values # subset 2
    test2_suids = splits_df.loc[splits_df.SplitType == "test2", "StudyInstanceId"].values # subset 3

    train_idxs = [idx for idx, suid in enumerate(suids) if suid in train_suids]
    valid_idxs = [idx for idx, suid in enumerate(suids) if suid in valid_suids]
    test1_idxs = [idx for idx, suid in enumerate(suids) if suid in test1_suids]
    test2_idxs = [idx for idx, suid in enumerate(suids) if suid in test2_suids]

    dsource = DataSource(suids, tfms=[tfmx, tfmy], splits=[train_idxs, valid_idxs, test1_idxs, test2_idxs])
    return dsource

#Cell
get_notl_brain_mr_dsource = partial(create_mr_ct_dsource, output_paths.MR,
                                             csv_split_paths.MR,
                                             tfm_image_pt,
                                             tfm_brain_mask_pt)

get_notl_brain_ct_dsource = partial(create_mr_ct_dsource, output_paths.CT,
                                             csv_split_paths.CT,
                                             tfm_image_pt,
                                             tfm_brain_mask_pt)

get_notl_ventricle_mr_dsource = partial(create_mr_ct_dsource, output_paths.MR,
                                                 csv_split_paths.MR,
                                                 tfm_skull_stripped_image_pt,
                                                 tfm_ventricles_mask_pt)

get_notl_ventricle_ct_dsource = partial(create_mr_ct_dsource, output_paths.CT,
                                                 csv_split_paths.CT,
                                                 tfm_skull_stripped_image_pt,
                                                 tfm_ventricles_mask_pt)

#Cell
datasource_dict = {}
datasource_dict['notl_brain_mr'] = get_notl_brain_mr_dsource
datasource_dict['notl_brain_ct'] = get_notl_brain_ct_dsource
datasource_dict['notl_ventricle_mr'] = get_notl_ventricle_mr_dsource
datasource_dict['notl_ventricle_ct']  = get_notl_ventricle_ct_dsource

#Cell
def atlas_tfm_image_pt(o): return o.parent/(o.name + "_image_normalized.pt")
def atlas_tfm_brain_mask_pt(o): return o.parent/(o.name + "_brain_mask.pt")
def atlas_tfm_skull_stripped_image_pt(o): return o.parent/(o.name + "_skull_stripped_image_normalized.pt")
def atlas_tfm_ventricles_mask_pt(o): return o.parent/(o.name + "_ventricles_mask.pt")

#Cell
def create_atlas_dsource(atlas_path, mr_path, atlas_splits_path, mr_splits_path, tfm_pt_x, tfm_pt_y):
    """

    tfm_pt_x: tfm_image_pt or tfm_skull_stripped_image_pt
    tfm_pt_y: tfm_brain_mask_pt or tfm_ventricles_mask_pt
    """
    atlas_path = Path(atlas_path)
    mr_path = Path(mr_path)
    atlas_splits_df = pd.read_csv(atlas_splits_path)
    mr_splits_df = pd.read_csv(mr_splits_path)

    tfmx = [tfm_pt_x, torch.load, unsqz]
    tfmy = [tfm_pt_y, torch.load]

    train_suids = atlas_splits_df.loc[atlas_splits_df.SplitType == "train", "StudyInstanceId"].values # subset 0
    valid_suids = mr_splits_df.loc[mr_splits_df.SplitType == "valid", "StudyInstanceId"].values # subset 1

    train_items, valid_items = [atlas_path/o for o in train_suids], [mr_path/o for o in valid_suids]
    items = train_items + valid_items
    train_idxs = np.arange(len(train_items))
    valid_idxs = len(train_idxs) + np.arange(len(valid_items))

    dsource = DataSource(items, tfms=[tfmx, tfmy], splits=[train_idxs, valid_idxs])
    return dsource

#Cell
get_atlas_brain_mr_dsource = partial(create_atlas_dsource, output_paths.ATLAS,
                                                  output_paths.MR,
                                                  csv_split_paths.ATLAS,
                                                  csv_split_paths.MR,
                                                  atlas_tfm_image_pt,
                                                  atlas_tfm_brain_mask_pt)

get_atlas_ventricle_mr_dsource = partial(create_atlas_dsource, output_paths.ATLAS,
                                                  output_paths.MR,
                                                  csv_split_paths.ATLAS,
                                                  csv_split_paths.MR,
                                                  atlas_tfm_skull_stripped_image_pt,
                                                  atlas_tfm_ventricles_mask_pt)

#Cell
datasource_dict['atlas_brain_mr'] = get_atlas_ventricle_mr_dsource
datasource_dict['atlas_ventricle_mr'] = get_atlas_brain_mr_dsource